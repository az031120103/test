export * from './inesatCliShare';
export * from './externals';
export * from './modulefederation';
export * from './libMode';
import { HtmlOptions } from "../config/html";
import { LoggerType } from "../helper/logger";
import { Configuration, ResolveOptions } from 'webpack';
export declare type modeType = 'development' | 'production' | 'none' | undefined;
export declare type cliOptionsType = {
    [key: string]: string | number | boolean;
} & {
    /**
     * 全局环境变量
     * dotenv 先根据 env 做判断、否则再按照 webpack mode 做判断
     */
    env?: string;
    analyze?: boolean;
    typingsPath?: string;
};
export declare type wpPathsType = {
    output: Configuration['output'];
};
export declare type ConfigResolveAliasType = {
    [index: string]: string;
};
export declare type ConfigResolveType = {
    modules: ResolveOptions['modules'];
    alias: ConfigResolveAliasType;
    extensions: ResolveOptions['extensions'];
    extends: boolean;
};
export declare type externalAssetsType = {
    js: string[];
    css: string[];
};
export declare type pkgType = {
    dependencies: any;
    devDependencies: any;
    version: string;
    name: string;
    [key: string]: any;
};
export declare type EntriesType = {
    [entryFilename: string]: HtmlOptions;
};
export declare type Override<What, With> = Omit<What, keyof With> & With;
export declare type ConfigDebugType = {
    clearLog: boolean;
    progress: boolean;
    profile: boolean;
    wplogger: boolean | string;
    /**
     * 是否开启webpack cache
     * @default false
     */
    webpackCache: boolean;
    /**
     * 是否开启 babel debug
     * @default false
     */
    babelDebug: boolean;
    /**
     * 日志级别
     */
    level: LoggerType;
};
/**
 * compile 构建相关
 * @param loader loader方法
 * @param minify 是否 使用进行 js压缩
 * @default false
 * @param cssminify 是否使用进行 css压缩
 * @default false
 */
export declare type CompileLoaderCallBackType = {
    loader: any;
    options: any;
};
export declare type CompileLoaderType = (...args: any[]) => CompileLoaderCallBackType;
export declare type CompileLoaderNameType = 'babel' | 'swc' | 'esbuild';
export declare type CompileType = {
    loader: CompileLoaderType;
    compileType: CompileLoaderNameType;
    minify?: boolean;
    cssminify?: boolean;
};
export declare type JscTarget = 'es3' | 'es5' | 'es2015' | 'es2016' | 'es2017' | 'es2018' | 'es2019' | 'es2020' | 'es2021' | 'es2022';
