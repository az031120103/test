"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = __importDefault(require("../helper/store"));
//
const exp = /^([0-9a-zA-Z_\s]+)@(.*)/; // 匹配库内容如 React@http://
//
class InesatCliShare {
    constructor() {
        this.moduleFederation = {};
        this.externals = {};
        this.externalAssets = { js: [], css: [] };
        // inesatCliShare: InesatCliShareType = {}
        this.downloadRemote = {};
    }
    async setup() {
        if (store_1.default.config.inesatCliShare) {
            if (!store_1.default.isESM) {
                await this.setInesatCliShare();
            }
            else {
                // 需要重写 非 esm 下的 模块管理
                await this.setESMInesatClishare();
            }
        }
        else {
            await Promise.all([this.setExternals(), this.setModuleFederation()]);
        }
    }
    async setESMInesatClishare() {
        let mf = {};
        if (typeof store_1.default.config.inesatCliShare === 'function') {
            mf = await store_1.default.config.inesatCliShare(store_1.default.config);
        }
        else if (store_1.default.config.inesatCliShare) {
            mf = store_1.default.config.inesatCliShare;
        }
        for (const [k, v] of Object.entries(mf.shareLib || {})) {
            this.externals[k] = v;
        }
        delete mf.shareLib;
        await this.setModuleFederation(mf);
    }
    async setInesatCliShare() {
        let mf = {};
        if (typeof store_1.default.config.inesatCliShare === 'function') {
            mf = await store_1.default.config.inesatCliShare(store_1.default.config);
        }
        else if (store_1.default.config.inesatCliShare) {
            mf = store_1.default.config.inesatCliShare;
        }
        const externals = [];
        if (typeof mf.shareLib === 'object') {
            for (const [k, v] of Object.entries(mf.shareLib)) {
                let externalsItem = {};
                externalsItem.module = k;
                // 增加下划线 支持 lodash 等特殊符号的问题 如 _@http
                if (typeof v === 'string') {
                    const cb = v.match(exp) || [];
                    if (cb.length > 0) {
                        externalsItem.global = cb[1];
                        externalsItem.entry = cb[2];
                        externalsItem.type = 'js';
                        externals.push(externalsItem);
                        externalsItem = {};
                    }
                    else {
                        externalsItem.global = '';
                        externalsItem.entry = v;
                        externalsItem.type = 'js';
                        externals.push(externalsItem);
                        externalsItem = {};
                    }
                }
                else if (Array.isArray(v)) {
                    v.map(vo => {
                        if (!vo)
                            return;
                        const isCSS = vo.split('?')[0].endsWith('.css');
                        if (isCSS) {
                            externalsItem.entry = vo;
                            externalsItem.type = 'css';
                        }
                        else {
                            const cb = vo.match(exp) || [];
                            if (cb.length > 0) {
                                externalsItem.global = cb[1];
                                externalsItem.entry = cb[2];
                                externalsItem.type = 'js';
                            }
                            else {
                                externalsItem.global = '';
                                externalsItem.entry = vo;
                                externalsItem.type = 'js';
                            }
                        }
                        externals.push(externalsItem);
                        externalsItem = {};
                    });
                }
                else if (typeof v === 'object' && v.entry) {
                    externalsItem.entry = v.entry;
                    externalsItem.global = v.global;
                    externalsItem.type = v.type;
                    externals.push(externalsItem);
                    externalsItem = {};
                }
            }
            delete mf.shareLib;
        }
        await Promise.all([this.setExternals(externals), this.setModuleFederation(mf)]);
    }
    /**
     * setExternals
     * concat inesatCliShare's externals
     * @param externals
     */
    async setExternals(externals = []) {
        const externalsOpt = store_1.default.config.externals || [];
        if (externalsOpt || externals.length > 0) {
            let list = [];
            if (typeof externalsOpt === 'function') {
                list = await externalsOpt(store_1.default.config);
            }
            else if (externalsOpt.length > 0) {
                list = externalsOpt;
            }
            list = list.concat(externals);
            list.map(v => {
                v.type = v.type || 'js';
                if (v.type === 'js' && v.module) {
                    if (v.global) {
                        if (!store_1.default.config.useExternalsReplaceScript) {
                            this.externals[v.module] = v.global;
                        }
                        else {
                            this.externals[v.module] = `${v.global}${v.entry ? `@${v.entry}` : ''}`;
                        }
                    }
                    else if (store_1.default.isESM) {
                        this.externals[v.module] = v.entry;
                    }
                    // 可以不传入 entry 利用传统的 merge request 进行合并请求
                    if (v.entry)
                        this.externalAssets.js.push(v.entry);
                }
                else if (v.type === 'css' && v.entry) {
                    this.externalAssets.css.push(v.entry);
                }
            });
        }
    }
    /**
     * setModuleFederation
     * inesatclishare Replace module federation options
     * @param moduleFederation
     */
    async setModuleFederation(moduleFederation) {
        let moduleFederationOpt = moduleFederation || store_1.default.config.moduleFederation;
        if (moduleFederationOpt) {
            if (typeof moduleFederationOpt === 'function') {
                moduleFederationOpt = await moduleFederationOpt(store_1.default.config);
            }
            this.downloadRemote = { ...moduleFederationOpt.remotes };
            if (moduleFederationOpt.name) {
                moduleFederationOpt.filename = moduleFederationOpt.filename || 'inesatCli.js';
                if (!moduleFederationOpt.library && store_1.default.isESM) {
                    // 实验 MF 的 ESM 模式是否正常运行
                    moduleFederationOpt.library = { type: 'module' };
                    // moduleFederationOpt.library = {type: 'window', name: moduleFederationOpt.name}
                    // === 去除@ esm 不需要 named
                    const remotes = moduleFederationOpt.remotes || {};
                    for (const [k, v] of Object.entries(remotes)) {
                        if (typeof v === 'string') {
                            // console.log('v.match(exp)', v.match(exp), v)
                            const cb = v.match(exp) || [];
                            if (cb.length > 0) {
                                remotes[k] = cb[2];
                            }
                        }
                    }
                    moduleFederationOpt.remotes = remotes;
                }
                this.moduleFederation = moduleFederationOpt;
            }
        }
    }
}
exports.default = InesatCliShare;
//# sourceMappingURL=inesatCliShare.js.map