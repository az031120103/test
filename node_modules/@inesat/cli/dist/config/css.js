"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initCSS = void 0;
const logger_1 = __importDefault(require("../helper/logger"));
const defaultVwConfig = {
    unitToConvert: 'px',
    viewportWidth: 320,
    viewportHeight: 568,
    unitPrecision: 5,
    viewportUnit: 'vw',
    fontViewportUnit: 'vw',
    selectorBlackList: [],
    propList: ['*'],
    minPixelValue: 1,
    mediaQuery: false,
    replace: true,
    landscape: false,
    landscapeUnit: 'vw',
    landscapeWidth: 568,
};
const defaultRemConfig = {
    rootValue: 16,
    unitPrecision: 5,
    // propList: ['font', 'font-size', 'line-height', 'letter-spacing'],
    propList: ['*'],
    selectorBlackList: [],
    replace: true,
    mediaQuery: false,
    minPixelValue: 0,
    // exclude: /node_modules/i, //这里表示不处理node_modules文件夹下的内容
};
const initCSS = (o = {}) => {
    if (o.rem && o.vw) {
        if (!o.unit) {
            logger_1.default.warn('单位处理 vw 与 rem 不能同时存在，已切换到 vw');
            delete o.rem;
            o.unit = 'vw';
        }
        else {
            if (o.unit === 'vw')
                delete o.rem;
            else
                delete o.vw;
        }
    }
    if (o.unit === 'rem') {
        o.rem = o.rem || defaultRemConfig;
    }
    if (o.unit === 'vw') {
        o.vw = o.vw || defaultVwConfig;
    }
    return o;
};
exports.initCSS = initCSS;
//# sourceMappingURL=css.js.map