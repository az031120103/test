"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const config_1 = require("../config");
const logger_1 = __importDefault(require("./logger"));
const inesatCliShare_1 = __importDefault(require("../config/inesatCliShare"));
const utils_1 = require("./utils");
class GlobalStore {
    constructor() {
        /**
         * InesatCli Version
         * @default package version
         */
        this.inesatCliPkg = { dependencies: {}, devDependencies: {}, version: '2.0.0', name: '' };
        /**
         * 项目pkg信息
         */
        this.pkg = { dependencies: {}, devDependencies: {}, version: '0.0.0', name: '' };
        /**
         * 项目根目录绝对路径
         * @default process.cwd()
         */
        this.root = process.cwd();
        /**
         * inesatCli 内部根路径
         * @default path.resolve(__dirname, '../../')
         */
        this.inesatCliRoot = path_1.default.resolve(__dirname, '../../');
        /**
         * inesatCli 执行代码路径
         */
        this.inesatCliSource = path_1.default.resolve(this.inesatCliRoot, 'dist');
        /**
         * 获取项目 根目录绝对路径
         * (*) relativePath 可以是绝对路径
         * @param relativePath
         * @returns
         */
        this.resolve = (relativePath) => path_1.default.isAbsolute(relativePath) ? relativePath : path_1.default.resolve(this.root, relativePath);
        /**
         * 获取项目 inesatCli 内部根目录绝对路径
         * @param relativePath
         * @returns
         */
        this.inesatCliResolve = (relativePath) => path_1.default.resolve(this.inesatCliRoot, relativePath);
        /**
         * 源码地址 绝对路径
         */
        this.appSrc = '';
        /**
         * 源码生成目录 绝对路径
         */
        this.outDir = '';
        /**
         * 静态文件目录 绝对路径
         */
        this.publicDir = '';
        /**
         * 缓存目录 绝对路径
         */
        this.cacheDir = '';
        /**
         * 命令行变量
         */
        // public cliOptions: cliOptionsType = {}
        /**
         * 是否 ESM 模块
         */
        this.isESM = false;
        this.inesatCliShare = new inesatCliShare_1.default();
    }
    /**
     * setConfig 设置全局配置
     * @param mode webpack mode
     * @param cliOptions command options
     * @param pkg package.json data
     */
    async setup(mode, cliOptions, inesatCliPkg) {
        // 加载多环境配置
        const env = cliOptions.env || mode;
        const envPath = this.resolve(`.env${env ? '.' + env : ''}`);
        require('dotenv').config({ path: envPath });
        // 初始化 inesatCli pkg 暂时不获取依赖
        this.inesatCliPkg = { ...this.inesatCliPkg, ...{ version: inesatCliPkg.version } };
        // 项目 package.json
        const pkg = require(this.resolve('package.json'));
        this.pkg = { ...this.pkg, ...pkg };
        //
        await this.setConfig(mode, cliOptions);
        // 初始化 构建 模式 环境变量
        this.config.mode = mode;
        this.config.env = cliOptions.env;
        // check IsESM
        this.isESM = ['es3', 'es5'].indexOf(this.config.build.target) === -1;
        // 设置绝对路径
        this.setAbsPaths();
        // 根据 cliOptions 覆盖 config
        this.setConfigByCliPotions(cliOptions);
        if (!this.config.build.lib) {
            // lib 模式下 忽略 inesatCliShare 设置
            // inesatCliShare 初始化
            await this.inesatCliShare.setup();
        }
        // show logger of config
        if (this.config.debug.wplogger === true)
            logger_1.default.info('[inesat-cli-config]', this.config);
    }
    setAbsPaths() {
        //
        this.appSrc = this.resolve(this.config.appSrc);
        this.outDir = this.resolve(this.config.build.outDir);
        this.publicDir = this.resolve(this.config.publicDir);
        this.cacheDir = this.resolve(this.config.cacheDir);
    }
    // 覆盖 config 配置
    setConfigByCliPotions(cliOptions) {
        // debug 替换配置项
        if (cliOptions.clearLog === 'false' || cliOptions.clearLog === false)
            this.config.debug.clearLog = false;
        if (cliOptions.profile === true)
            this.config.debug.profile = true;
        if (cliOptions.wplogger === true)
            this.config.debug.wplogger = true;
        if (typeof cliOptions.wplogger === 'string' && cliOptions.wplogger.length > 0)
            this.config.debug.wplogger = cliOptions.wplogger;
        if (cliOptions.progress === 'false' || cliOptions.progress === false)
            this.config.debug.progress = false;
        // server build 替换配置项
        if (cliOptions.open === true)
            this.config.server.open = true;
        if (cliOptions.hot === 'false')
            this.config.server.hot = false;
        if (cliOptions.analyze === true)
            this.config.build.analyze = true;
        // dts 配置
        if (cliOptions.typingsPath)
            this.config.typingsPath = cliOptions.typingsPath;
        if (cliOptions.ts === true)
            this.config.build.createTs = true;
    }
    async setConfig(mode, cliOptions) {
        // 初始化 inesat-cli-config.js
        const fp = this.resolve('inesat-cli-config.js');
        if (fs_extra_1.default.existsSync(fp)) {
            const configExport = require(fp);
            if (typeof configExport === 'function') {
                const conf = await configExport({ mode, ...cliOptions });
                this.config = await (0, config_1.initConfig)(conf);
            }
            else if (typeof configExport === 'object') {
                const conf = configExport;
                this.config = await (0, config_1.initConfig)(conf);
            }
        }
        else {
            this.config = await (0, config_1.initConfig)();
        }
        this.checkAndSetReactVersion();
    }
    checkAndSetReactVersion() {
        const version = this.pkg.dependencies.react || this.pkg.devDependencies.react;
        if (version) {
            this.config.reactRuntime = (0, utils_1.vCompare)(version, '17') > -1 ? 'automatic' : 'classic';
        }
    }
}
exports.default = new GlobalStore();
//# sourceMappingURL=store.js.map