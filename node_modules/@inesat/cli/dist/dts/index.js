"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.emitDts = exports.createDtsEmitThreadForBuild = exports.createDtsEmitThread = void 0;
const store_1 = __importDefault(require("../helper/store"));
const logger_1 = __importStar(require("../helper/logger"));
const worker_threads_1 = require("worker_threads");
const plugin = {
    name: 'DTSPlugin'
};
class DTSPlugin {
    constructor(options) {
        this.dtsThread = undefined;
        this.options = options;
    }
    apply(compiler) {
        compiler.hooks.watchRun.tap('WatchRun', () => {
            if (!this.dtsThread) {
                this.dtsThread = createDtsEmitThread();
            }
            emitDts(this.dtsThread);
        });
        const isTypeForOutDir = store_1.default.config.build.outDir === store_1.default.config.build.typesOutDir;
        isTypeForOutDir &&
            compiler.hooks.afterEmit.tap(plugin, () => {
                logger_1.default.debug('[afterEmit] createDtsEmitThreadForBuild');
                createDtsEmitThreadForBuild();
            });
    }
}
function createDtsEmitThread() {
    (0, logger_1.logTag)('dts building in worker thread.', 'black');
    return new worker_threads_1.Worker(__dirname + '/dtsThread.js');
}
exports.createDtsEmitThread = createDtsEmitThread;
// build 期间用的 dts
function createDtsEmitThreadForBuild() {
    const dtsThread = createDtsEmitThread();
    emitDts(dtsThread);
    dtsThread.on('message', res => {
        dtsThread.terminate();
        if (res === 'finish')
            dtsThread.terminate();
    });
}
exports.createDtsEmitThreadForBuild = createDtsEmitThreadForBuild;
function emitDts(dtsThread) {
    const op = {
        appSrc: store_1.default.config.appSrc,
        appAbsSrc: store_1.default.appSrc,
        build: store_1.default.config.build,
        mf: store_1.default.inesatCliShare.moduleFederation,
        alias: store_1.default.config.resolve.alias,
        typesOutDir: store_1.default.config.build.typesOutDir,
        needClear: !(store_1.default.config.build.outDir === store_1.default.config.build.typesOutDir),
        pkgName: store_1.default.pkg.name,
    };
    dtsThread.postMessage(JSON.stringify(op));
}
exports.emitDts = emitDts;
exports.default = DTSPlugin;
//# sourceMappingURL=index.js.map