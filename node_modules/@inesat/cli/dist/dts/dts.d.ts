import { RquireBuildOptions } from "../config/build";
import { MFOptions } from "../types/moduleFederation";
import ts from 'typescript';
import { ConfigResolveAliasType } from "../types";
export declare type DTSTLoadertype = {
    build: RquireBuildOptions;
    mf?: MFOptions;
    needClear?: boolean;
    appSrc?: string;
};
export declare type DTSOptionsType = {
    alias: ConfigResolveAliasType;
    typesOutDir: string;
    appAbsSrc: string;
    appSrc: string;
    build: RquireBuildOptions;
    mf: MFOptions;
    needClear: boolean;
    pkgName: string;
};
declare type CodeObjType = {
    code: string;
    key: string[];
};
declare class DTSEmitFile {
    outDir: string;
    languageService: ts.LanguageService;
    lib: CodeObjType;
    tsconfig: ts.CompilerOptions;
    inesatCliFilename: string;
    libFilename: string;
    op: DTSOptionsType;
    constructor();
    setup(op: DTSOptionsType): void;
    emit(filename: string): void;
    createFile(): void;
    genCode(o: ts.OutputFile): void;
    warpDeclareModule(module: string, code: string): {
        code: string;
        exposeName: string;
    };
    destroy(): void;
}
export default DTSEmitFile;
