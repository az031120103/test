"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTSService = void 0;
const typescript_1 = __importDefault(require("typescript"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const getTSConfig_1 = require("./getTSConfig");
// 缓存，缓存 TS 编译的结果
const cache = { fileNameMapping: {}, cwd: '' };
/**
 * 创建 TS 服务,并且根据 .ts & .tsx 文件编译出 d.ts
 * Typescript 文档:
 * https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API#incremental-build-support-using-the-language-services
 * @param options
 * @param cwd
 * @returns
 */
function getTSService(options, cwd) {
    if (cache.languageService && cache.cwd === cwd) {
        return cache.languageService;
    }
    cache.cwd = cwd;
    const rootFileNames = (0, getTSConfig_1.getFileNames)(cwd);
    const files = {};
    // initialize the list of files
    rootFileNames.forEach(fileName => {
        files[fileName] = { version: 0 };
    });
    const servicesHost = {
        getScriptFileNames: () => rootFileNames,
        getScriptVersion: fileName => files[fileName] && files[fileName].version.toString(),
        getScriptSnapshot: fileName => {
            if (!fs_extra_1.default.existsSync(fileName)) {
                return undefined;
            }
            return typescript_1.default.ScriptSnapshot.fromString(fs_extra_1.default.readFileSync(fileName).toString());
        },
        getCurrentDirectory: () => cwd,
        getCompilationSettings: () => options,
        getDefaultLibFileName: options => typescript_1.default.getDefaultLibFilePath(options),
        fileExists: typescript_1.default.sys.fileExists,
        readFile: typescript_1.default.sys.readFile,
        readDirectory: typescript_1.default.sys.readDirectory,
        directoryExists: typescript_1.default.sys.directoryExists,
        getDirectories: typescript_1.default.sys.getDirectories,
    };
    const languageService = typescript_1.default.createLanguageService(servicesHost, typescript_1.default.createDocumentRegistry());
    cache.languageService = languageService;
    return languageService;
}
exports.getTSService = getTSService;
//# sourceMappingURL=getTSService.js.map