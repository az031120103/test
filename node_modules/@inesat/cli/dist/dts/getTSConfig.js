"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileNames = exports.getTSConfig = exports.getTSConfigPath = void 0;
const typescript_1 = __importDefault(require("typescript"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../helper/logger"));
function getTSConfigPath(cwd) {
    const configPath = typescript_1.default.findConfigFile(cwd, typescript_1.default.sys.fileExists, 'tsconfig.json');
    return configPath;
}
exports.getTSConfigPath = getTSConfigPath;
function getTSConfig(cwd) {
    const tsconfigPath = getTSConfigPath(cwd);
    if (!tsconfigPath) {
        throw new Error("Could not find a valid 'tsconfig.json'.");
    }
    try {
        /**
         * 由于 tsconfig.json 内容可以是 JavaScript 对象，
         * 不一定是JSON，所以需要 eval 执行。
         * 如果通过 require 方式引入，格式不符合 JSON 则会根据格式报错，
         */
        const tsconfigStr = fs_extra_1.default.readFileSync(tsconfigPath, 'utf8');
        const tsconfig = eval(`module.exports = ${tsconfigStr}`);
        // return tsconfig.compilerOptions
        // console.log('tsconfig', tsconfig)
        return tsconfig;
    }
    catch (error) {
        logger_1.default.error(error);
    }
}
exports.getTSConfig = getTSConfig;
// 读文件配置
const parseConfigHost = {
    fileExists: fs_extra_1.default.existsSync,
    readDirectory: typescript_1.default.sys.readDirectory,
    readFile: function (file) {
        return fs_extra_1.default.readFileSync(file, 'utf8');
    },
    useCaseSensitiveFileNames: true,
};
/**
 * 获取文件名
 * @param cwd
 * @returns
 */
function getFileNames(cwd) {
    const tsconfigPath = getTSConfigPath(cwd);
    const tsconfig = getTSConfig(cwd);
    if (tsconfigPath) {
        const parsed = typescript_1.default.parseJsonConfigFileContent(tsconfig, parseConfigHost, path_1.default.dirname(tsconfigPath));
        return parsed.fileNames;
    }
    return [];
}
exports.getFileNames = getFileNames;
//# sourceMappingURL=getTSConfig.js.map