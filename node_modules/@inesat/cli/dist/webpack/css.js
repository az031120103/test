"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const css_minimizer_webpack_plugin_1 = __importDefault(require("css-minimizer-webpack-plugin"));
const store_1 = __importDefault(require("../helper/store"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
//
const cssRegex = /\.css$/;
const cssModuleRegex = /\.module\.css$/;
const sassRegex = /\.(scss|sass)$/;
const sassModuleRegex = /\.module\.(scss|sass)$/;
const lessRegex = /\.less$/;
const lessModuleRegex = /\.module\.less$/;
//
class WPCss {
    constructor() {
        this.splitCss = true;
        this.isDev = true;
        this.localIdentName = '';
        this.isModules = false;
    }
    async setup() {
        this.isDev = store_1.default.config.mode === 'development';
        this.splitCss = store_1.default.config.splitCss;
        this.localIdentName = this.isDev ? '[path][name]-[local]-[hash:base64:5]' : '[local]-[hash:base64:5]';
        //
        this.setCssConfig();
        this.setCssMinify();
    }
    setCssConfig() {
        //
        const config = {
            module: {
                rule: {
                    css: {
                        test: cssRegex,
                        exclude: cssModuleRegex,
                        use: this.loaders()
                    },
                    cssModule: {
                        test: cssModuleRegex,
                        use: this.loaders(true)
                    },
                    sassModule: {
                        test: sassModuleRegex,
                        use: this.loaders(true, 'sass')
                    },
                    sass: {
                        test: sassRegex,
                        exclude: sassModuleRegex,
                        use: this.loaders(false, 'sass')
                    },
                    less: {
                        test: lessRegex,
                        exclude: lessModuleRegex,
                        use: this.loaders(false, 'less')
                    },
                    lessModule: {
                        test: lessModuleRegex,
                        use: this.loaders(true, 'less')
                    }
                }
            }
        };
        wpChain_1.default.merge(config);
    }
    setCssMinify() {
        //[css minify]
        if (this.isMiniCss) {
            if (store_1.default.config.build.minify === true) {
                //::TODO 适配老版本 后续观察变化
                const op = {
                    parallel: true,
                    minimizerOptions: {
                        preset: [
                            'default',
                            {
                                discardComments: { removeAll: true }
                            }
                        ]
                    }
                };
                wpChain_1.default.optimization.minimizer('CssMinimizerPlugin').use(css_minimizer_webpack_plugin_1.default, [op]);
            }
            const staticDir = store_1.default.config.build.staticDir ? `${store_1.default.config.build.staticDir}/` : '';
            wpChain_1.default.plugin('MiniCssExtractPlugin').use(mini_css_extract_plugin_1.default, [
                {
                    ignoreOrder: true,
                    filename: `${staticDir}css/[name].[contenthash:8].css`,
                    chunkFilename: `${staticDir}css/[name].[contenthash:8].chunk.css`,
                    /**
                      experimentalUseImportModule
                      https://github.com/webpack-contrib/mini-css-extract-plugin#experimentalUseImportModule
                      Use an experimental webpack API to execute modules instead of child compilers.
                      This improves performance and memory usage a lot, but isn't as stable as the normal approach.
                      When combined with experiments.layers, this adds a layer option to the loader options to specify the layer of the css execution.
                      You need to have at least webpack 5.33.2.
                     */
                    // experimentalUseImportModule: true
                }
            ]);
        }
    }
    get isStyleLoader() {
        const { splitCss, isDev } = this;
        if (!splitCss)
            return true;
        if (isDev)
            return true;
        return false;
    }
    get isMiniCss() {
        const { splitCss, isDev } = this;
        if (splitCss && !isDev)
            return true;
        return false;
    }
    get style() {
        const options = store_1.default.config.base ? { publicPath: store_1.default.config.base } : {}; // 修复css 绝对路径的问题[改进项]
        return this.isStyleLoader
            ? {
                loader: require.resolve('style-loader'),
                options: {}
            }
            : {
                loader: mini_css_extract_plugin_1.default.loader,
                options
            };
    }
    get css() {
        const { localIdentName, isModules } = this;
        return {
            loader: require.resolve('css-loader'),
            options: {
                modules: isModules ? { localIdentName } : isModules
            }
        };
    }
    get sass() {
        const { isDev } = this;
        return {
            loader: require.resolve('sass-loader'),
            options: {
                implementation: require('sass'),
                sourceMap: isDev
            }
        };
    }
    get less() {
        const { isModules } = this;
        return isModules
            ? { loader: require.resolve('less-loader') }
            : {
                loader: require.resolve('less-loader'),
                options: {
                    lessOptions: { javascriptEnabled: true }
                }
            };
    }
    get postcss() {
        const o = {
            loader: require.resolve('postcss-loader'),
            options: {
                postcssOptions: {
                    ident: 'postcss',
                    hideNothingWarning: true,
                    // config: false,
                    plugins: [
                        require.resolve('postcss-flexbugs-fixes'),
                        [
                            require.resolve('postcss-preset-env'),
                            {
                                autoprefixer: {
                                    flexbox: 'no-2009',
                                },
                                stage: 3,
                                features: {
                                    'custom-properties': false
                                }
                            }
                        ]
                        // require.resolve('postcss-normalize'), //允许您使用 normalize.css or sanitize.css. 从 browserslist 适配。
                    ]
                }
            }
        };
        if (store_1.default.config.css.unit === 'vw') {
            o.options.postcssOptions.plugins.push([
                require.resolve('./plugin/postcss/postcss-px-to-viewport'),
                store_1.default.config.css.vw
            ]);
        }
        if (store_1.default.config.css.unit === 'rem') {
            o.options.postcssOptions.plugins.push([require.resolve('postcss-pxtorem'), store_1.default.config.css.rem]);
        }
        return o;
    }
    loaders(isModules = false, parser) {
        this.isModules = isModules;
        const { style, css, postcss, sass, less } = this;
        const opt = {
            style,
            css,
            postcss
        };
        if (parser && parser === 'sass') {
            opt.sass = sass;
        }
        else if (parser && parser === 'less') {
            opt.less = less;
        }
        return opt;
    }
}
//
exports.default = WPCss;
//# sourceMappingURL=css.js.map