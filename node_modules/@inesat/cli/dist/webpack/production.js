"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
const copy_webpack_plugin_1 = __importDefault(require("copy-webpack-plugin"));
const store_1 = __importDefault(require("../helper/store"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
const webpack_manifest_plugin_1 = require("webpack-manifest-plugin");
// import ImageMinimizerPlugin from 'image-minimizer-webpack-plugin'
const logger_1 = __importDefault(require("../helper/logger"));
const path_1 = __importDefault(require("path"));
// import type {SquooshOptionType} from 'src/types/squoosh'
class WPProduction {
    constructor() { }
    setCommon() {
        const config = {
            mode: 'production',
            devtool: store_1.default.config.build.sourcemap ? 'source-map' : false,
            performance: {
                hints: 'warning',
                maxEntrypointSize: 512000,
                maxAssetSize: 512000
            },
            optimization: {
                chunkIds: store_1.default.config.build.chunkIds || 'deterministic',
                minimize: store_1.default.config.build.minify ? true : false,
                // runtimeChunk: 'single', // 影响 MF 执行
                // ===[暂时观察有效性]===============
                // splitChunks: {
                //   cacheGroups: {
                //     //打包公共模块
                //     commons: {
                //       //initial表示提取入口文件的公共部分
                //       chunks: 'initial',
                //       //表示提取公共部分最少的文件数
                //       minChunks: 2,
                //       //表示提取公共部分最小的大小
                //       minSize: 0,
                //       //提取出来的文件命名
                //       name: 'commons',
                //     },
                //   },
                // },
                // =================
            }
        };
        wpChain_1.default.merge(config);
    }
    setCopy() {
        const wpcConfig = {
            plugin: {
                copy: {
                    plugin: copy_webpack_plugin_1.default,
                    args: [
                        {
                            patterns: [
                                {
                                    from: path_1.default.join(store_1.default.publicDir.replace(/\\/g, '/'), path_1.default.sep),
                                    to: path_1.default.join(store_1.default.outDir.replace(/\\/g, '/'), path_1.default.sep),
                                    globOptions: {
                                        // 加入 paths.template 避免被重置
                                        ignore: ['*.DS_Store']
                                    },
                                    noErrorOnMissing: true
                                }
                            ]
                        }
                    ]
                }
            }
        };
        wpChain_1.default.merge(wpcConfig);
    }
    setMinify() {
        const minOptions = store_1.default.config.build.minOptions || {};
        if (store_1.default.config.build.minify) {
            let options = {
                minify: terser_webpack_plugin_1.default.terserMinify,
                extractComments: false,
                terserOptions: {
                    // compress: false,
                    format: {
                        comments: false,
                    },
                    ...minOptions
                }
            };
            if (store_1.default.config.build.minify === 'swc' && store_1.default.config.compile.compileType === 'swc') {
                options = {
                    minify: terser_webpack_plugin_1.default.swcMinify,
                    extractComments: false,
                    terserOptions: {
                        // compress: false,
                        format: {
                            comments: false,
                        },
                        ...minOptions
                    }
                };
            }
            else if (store_1.default.config.compile.compileType === 'esbuild') {
                options = {
                    minify: terser_webpack_plugin_1.default.esbuildMinify,
                    extractComments: false,
                    terserOptions: {
                        format: 'esm',
                        ...minOptions
                    }
                };
            }
            logger_1.default.debug('store.config.build.minify', store_1.default.config.build.minify, store_1.default.config.debug);
            wpChain_1.default.optimization.minimizer('TerserPlugin').use(terser_webpack_plugin_1.default, [options]);
        }
    }
    // setImageMin() {
    //   if (store.config.build.imageMin) {
    //     const options: SquooshOptionType = {
    //       encodeOptions: {
    //         oxipng: {
    //           level: 3,
    //         },
    //       },
    //     }
    //     wpChain.optimization.minimizer('ImageMinimizerPlugin').use(ImageMinimizerPlugin, [
    //       {
    //         minimizer: {
    //           filter: (source, sourcePath) => {
    //             // console.log('sourcePath', sourcePath)
    //             if (/.png/.test(sourcePath)) {
    //               options.quant = {
    //                 maxNumColors: 256,
    //                 dither: 1,
    //               }
    //             }
    //             return true
    //           },
    //           implementation: ImageMinimizerPlugin.squooshMinify,
    //           options
    //         }
    //       }
    //     ])
    //   }
    // }
    setManifest() {
        const options = store_1.default.config.base ? { publicPath: store_1.default.config.base } : {};
        wpChain_1.default.plugin('WebpackManifestPlugin').use(webpack_manifest_plugin_1.WebpackManifestPlugin, [options]);
    }
    async setup() {
        //common
        this.setCommon();
        // copy
        this.setCopy();
        // minify
        this.setMinify();
        // this.setImageMin()
        // manifest 比较耗时 TODO 增加 config.build.manifest
        // this.setManifest()
    }
}
exports.default = WPProduction;
//# sourceMappingURL=production.js.map