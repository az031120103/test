"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const logger_1 = __importDefault(require("../helper/logger"));
const store_1 = __importDefault(require("../helper/store"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
class WPCommon {
    constructor() {
        this.isDev = true;
    }
    async setup() {
        this.isDev = store_1.default.config.mode === 'development';
        const { cache, resolve, experiments, output, stats, externals, target, snapshot } = this;
        // init config
        const config = {
            // cache: false,
            cache: store_1.default.config.debug.webpackCache === true ? cache : false,
            // snapshot, // 评估是否有效再加入到配置
            resolve,
            externals,
            target,
            experiments,
            output,
            stats
        };
        // ESM
        this.setESM(config);
        // Merge
        wpChain_1.default.merge(config);
        // console.log('store.config.debug.webpackCache', store.config.debug.webpackCache, config)
        //
        // const appPackageJson = store.resolve('package.json')
        // wpChain.resolve.plugin('ModuleScopePlugin').use(ModuleScopePlugin, [store.appSrc, [appPackageJson]])
    }
    setESM(config) {
        if (store_1.default.isESM) {
            config.externalsType = 'module';
        }
        else if (store_1.default.config.useExternalsReplaceScript) {
            config.externalsType = 'script';
        }
    }
    get target() {
        return store_1.default.config.build.wpTarget ? store_1.default.config.build.wpTarget : ['web', store_1.default.config.build.target];
    }
    get externals() {
        return store_1.default.inesatCliShare.externals;
    }
    get snapshot() {
        const conf = {
            // 由包管理器管理的路径数组，可以信任它不会被修改。
            managedPaths: [path_1.default.resolve(store_1.default.root, 'node_modules')],
            // 由包管理器管理的路径数组，在其路径中包含一个版本或哈希，以便所有文件都是不可变的
            immutablePaths: [],
            // 对于 buildDependencies snapshot 的创建方式
            buildDependencies: {
                // hash: true
                timestamp: true,
            },
            // 针对 module build 创建 snapshot 的方式
            module: {
                // hash: true
                timestamp: true,
            },
            // 在 resolve request 的时候创建 snapshot 的方式
            resolve: {
                // hash: true
                timestamp: true,
            },
            // 在 resolve buildDependencies 的时候创建 snapshot 的方式
            resolveBuildDependencies: {
                // hash: true
                timestamp: true,
            },
        };
        // console.log(conf)
        return conf;
    }
    get cache() {
        const watchConfig = [__filename];
        const inesatCliConfig = store_1.default.resolve('inesat-cli-config.js');
        if (fs_1.default.existsSync(inesatCliConfig)) {
            watchConfig.push(inesatCliConfig);
        }
        const cacheName = `${store_1.default.pkg.name || 'inesatCli'}-${store_1.default.config.mode}-${store_1.default.config.env || 'local'}`;
        // console.log('cacheName', cacheName, store.inesatCliPkg.version)
        return {
            name: cacheName,
            type: 'filesystem',
            version: store_1.default.inesatCliPkg.version,
            profile: store_1.default.config.debug.profile,
            store: 'pack',
            cacheDirectory: store_1.default.cacheDir,
            buildDependencies: {
                config: watchConfig
            }
        };
        // return false
    }
    get experiments() {
        return {
            outputModule: store_1.default.isESM,
            topLevelAwait: true,
            // buildHttp: {allowedUris: []}, // 影响热更
            backCompat: true
        };
    }
    get output() {
        const environment = !store_1.default.isESM
            ? {
                arrowFunction: false,
                bigIntLiteral: false,
                const: false,
                destructuring: false,
                forOf: false,
                dynamicImport: false,
                module: false
            }
            : {
            // module: true,
            // dynamicImport: true
            };
        const publicPath = store_1.default.config.base || '';
        const staticDir = store_1.default.config.build.staticDir ? `${store_1.default.config.build.staticDir}/` : '';
        //
        return {
            // TODO: Library 模式的处理
            // module: true,
            // iife: false,
            // scriptType: 'module',
            // module: true,
            // libraryTarget: 'module',
            // library: {
            //   // name: 'index',
            //   // type: 'module',
            //   // type: 'umd',
            // },
            // clean: store.config.build.emptyOutDir && !this.isDev, //替代 clean-webpack-plugin
            clean: store_1.default.config.build.emptyOutDir
                ? {
                    keep(asset) {
                        const typesOutDir = store_1.default.config.build.typesOutDir.replace(`${store_1.default.config.build.outDir}/`, '');
                        // logger.debug('typesOutDir', typesOutDir, 'store.config.build.emptyOutDir', store.config.build.emptyOutDir)
                        return asset.includes(typesOutDir);
                    }
                }
                : false,
            path: store_1.default.outDir,
            publicPath: store_1.default.config.build.lib ? publicPath : 'auto',
            filename: `${staticDir}js/[name].[contenthash:8].js`,
            assetModuleFilename: `${staticDir}${store_1.default.config.build.assetsDir}/[name].[contenthash:8][ext][query]`,
            environment,
            // scriptType: isESM ? 'module' : 'text/javascript',
            pathinfo: false // 在打包数千个模块的项目中，这会导致造成垃圾回收性能压力
        };
    }
    get resolve() {
        const configResolve = { ...{ extends: true }, ...store_1.default.config.resolve };
        //
        const rs = {
            modules: [
                'node_modules',
                store_1.default.resolve('node_modules'),
                store_1.default.inesatCliResolve('node_modules'),
                store_1.default.resolve('src') // 项目 src
            ],
            alias: {
                [store_1.default.config.appSrc]: store_1.default.appSrc
            },
            extensions: [
                '.js',
                '.jsx',
                '.mjs',
                '.ts',
                '.tsx',
                '.css',
                '.less',
                '.scss',
                '.sass',
                '.json',
                '.wasm',
                '.vue',
                '.svg',
                '.svga'
            ]
        };
        // 合并 config.resolve 配置项
        if (configResolve.modules) {
            rs.modules = configResolve.extends === false ? configResolve.modules : [...rs.modules, ...configResolve.modules];
        }
        if (configResolve.alias) {
            rs.alias = configResolve.extends === false ? configResolve.alias : { ...rs.alias, ...configResolve.alias };
        }
        if (configResolve.extensions) {
            rs.extensions =
                configResolve.extends === false ? configResolve.extensions : [...rs.extensions, ...configResolve.extensions];
        }
        store_1.default.config.resolve = { ...{ extends: configResolve.extends }, ...rs };
        return rs;
    }
    get stats() {
        return {
            // colors: true,
            // preset: 'none',
            preset: store_1.default.config.debug.level === 'error' ? 'errors-only' : 'errors-warnings',
            // moduleTrace: true,
            // errorDetails: true
        };
    }
}
exports.default = WPCommon;
//# sourceMappingURL=common.js.map