"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fast_glob_1 = __importDefault(require("fast-glob"));
const store_1 = __importDefault(require("../helper/store"));
const path_1 = __importDefault(require("path"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const logger_1 = __importDefault(require("../helper/logger"));
/**
 * multi entry
 * 多入口设置
 */
class WPEntries {
    constructor() {
        this.wpConfig = { entry: {}, plugin: {} };
    }
    async setup() {
        // 不允许 template 放到 public
        this.checkTemplateInPublic();
        //
        if (store_1.default.config.entries) {
            await this.multiEntry(store_1.default.config.entries);
        }
        else {
            await this.singleEntry();
        }
    }
    async multiEntry(entries = {}) {
        for (const [filename, htmlOptions] of Object.entries(entries)) {
            const entry = store_1.default.resolve(`${store_1.default.config.appSrc}/${filename}`);
            const chunk = htmlOptions.chunk ? htmlOptions.chunk : filename.replace(path_1.default.extname(entry), '');
            this.wpConfig.entry[chunk] = [store_1.default.resolve(entry)];
            // 处理路径问题
            if (htmlOptions.template) {
                htmlOptions.template = store_1.default.resolve(htmlOptions.template);
            }
            // 屏蔽子页面的favicon 防止重复操作导致报错
            if (htmlOptions.favicon) {
                // htmlOptions.favicon = store.resolve(htmlOptions.favicon)
                logger_1.default.warn('favicon只支持在 [html] 设置');
                delete htmlOptions.favicon;
            }
            //
            this.setHtmlWebpackPlugin([chunk], htmlOptions);
        }
        wpChain_1.default.merge(this.wpConfig);
    }
    async singleEntry() {
        await this.setIndexEntry();
        for (const chunk in this.wpConfig.entry) {
            this.setHtmlWebpackPlugin([chunk], {}, 'index.html');
        }
        wpChain_1.default.merge(this.wpConfig);
    }
    async setIndexEntry() {
        let entry = '';
        if (!store_1.default.config.appEntry) {
            const elist = await (0, fast_glob_1.default)([`${store_1.default.config.appSrc}/index.{ts,tsx,jsx,js}`]);
            if (!elist[0]) {
                throw new Error('找不到入口文件!');
            }
            entry = elist[0];
        }
        else {
            entry = `${store_1.default.config.appSrc}/${store_1.default.config.appEntry}`;
        }
        //基于 src 为根目录 获取文件
        const extname = path_1.default.extname(entry);
        const chunk = entry.replace(extname, '').replace(`${store_1.default.config.appSrc}/`, '');
        this.wpConfig.entry[chunk] = [store_1.default.resolve(entry)];
    }
    checkTemplateInPublic() {
        const { favicon, template } = store_1.default.config.html;
        const faviconAbs = path_1.default.dirname(favicon || '');
        const templateAbs = path_1.default.dirname(template || '');
        if (faviconAbs.includes(store_1.default.publicDir) || templateAbs.includes(store_1.default.publicDir)) {
            throw new Error('Template 与 favicon 不能放到./public,推荐放到 ./src or ./template');
        }
    }
    setHtmlWebpackPlugin(chunks = ['index'], htmlOptions = {}, filename) {
        const htmlConfig = store_1.default.config.html;
        // 单页面时 需要把 filename 设置成 index.html
        filename = filename ? filename : `${chunks[0]}.html`;
        htmlConfig.files.css = htmlConfig.files.css || [];
        htmlConfig.files.js = htmlConfig.files.js || [];
        htmlConfig.files.css = store_1.default.config.html.files.css.concat(store_1.default.inesatCliShare.externalAssets.css);
        if (!store_1.default.isESM && !store_1.default.config.useExternalsReplaceScript) {
            htmlConfig.files.js = store_1.default.config.html.files.js.concat(store_1.default.inesatCliShare.externalAssets.js);
        }
        //
        if (htmlOptions.files) {
            if (htmlOptions.files.css) {
                htmlConfig.files.css = htmlConfig.files.css.concat(htmlOptions.files.css);
            }
            if (htmlOptions.files.js && !store_1.default.isESM) {
                htmlConfig.files.js = htmlConfig.files.js.concat(htmlOptions.files.js);
            }
        }
        const options = {
            // title: 'InesatCli',
            // template,
            chunks,
            // favicon,
            // inject: false, // 避免插入两个同样 js ::TODO 延展增加 node_modules
            inject: 'body',
            filename,
            // isESM: store.isESM,
            scriptLoading: !store_1.default.isESM ? 'defer' : 'module',
            minify: store_1.default.config.mode === 'production' && {
                removeComments: true,
                collapseWhitespace: true,
                removeRedundantAttributes: true,
                useShortDoctype: true,
                removeEmptyAttributes: true,
                removeStyleLinkTypeAttributes: true,
                keepClosingSlash: true,
                minifyJS: true,
                minifyCSS: true,
                minifyURLs: true,
            },
            ...htmlConfig,
            ...htmlOptions,
        };
        if (store_1.default.config.base && !options.publicPath) {
            options.publicPath = store_1.default.config.base;
        }
        // wpChain.plugin(`html_plugin_${chunks}`).use(HtmlWebpackPlugin, [options])
        this.wpConfig.plugin[`html_plugin_${chunks}`] = {
            plugin: html_webpack_plugin_1.default,
            args: [options]
        };
    }
}
exports.default = WPEntries;
//# sourceMappingURL=entries.js.map