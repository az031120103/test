"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = __importDefault(require("../helper/store"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
const loader_1 = __importDefault(require("./loader"));
class WPModule {
    constructor() { }
    async setup() {
        this.setConfig();
        this.setScriptReactLoader();
        this.setWebworker();
    }
    setConfig() {
        const { parser } = this;
        const config = {
            module: {
                parser,
                // mini-css-extract-plugin 编译不过！
                /* generator: {
                  asset: {
                    publicPath: store.config.base,//:TODO 验证 publicPath auto 需要设置 '/' or ''
                  },
                }, */
                rule: {
                    // 解决 mjs 加载失败问题
                    mjs: {
                        test: /\.m?js/,
                        resolve: {
                            fullySpecified: false,
                        },
                    },
                    //
                    scripts: {
                        test: /\.(js|jsx|ts|tsx)$/,
                        // exclude: /(node_modules|bower_components)/, //不能加 exclude 否则会专程 arrow
                        exclude: store_1.default.config.moduleTransformExclude,
                        // test: /\.(js|mjs|jsx|ts|tsx)$/,
                        // include: [store.appSrc],
                        use: {
                            ...(0, loader_1.default)().config
                        }
                    },
                    // webworker: this.webworker
                }
            }
        };
        wpChain_1.default.merge(config);
    }
    get parser() {
        return {
            javascript: {
                exportsPresence: 'error',
                importExportsPresence: 'error'
            }
        };
    }
    setWebworker() {
        const workerInline = wpChain_1.default.module
            .rule('webworker')
            .oneOf('workerInline')
            .resourceQuery(/worker/);
        //
        workerInline
            .use('workerLoader')
            .loader(require.resolve('worker-loader'))
            .options({
            inline: 'no-fallback',
            filename: '[name].[contenthash].worker.js',
        })
            .end();
        // 解决ts 不能正常构建的问题
        const loaderConfig = (0, loader_1.default)();
        workerInline.use(loaderConfig.type).loader(loaderConfig.loader.loader).options(loaderConfig.loader.options).end();
    }
    setScriptReactLoader() {
        const isDev = store_1.default.config.mode === 'development';
        const pkg = store_1.default.pkg;
        pkg.dependencies = pkg.dependencies || {};
        pkg.devDependencies = pkg.devDependencies || {};
        const reactVersion = pkg.dependencies.react || pkg.devDependencies.react;
        // 增加插件支持
        if (isDev && store_1.default.config.server.hot && !!store_1.default.config.reactRuntime && reactVersion) {
            wpChain_1.default.plugin('reactRefresh').use(require('@pmmmwh/react-refresh-webpack-plugin'), [
                {
                    overlay: false // 切换到默认 overlay
                }
            ]);
        }
    }
}
exports.default = WPModule;
//# sourceMappingURL=module.js.map