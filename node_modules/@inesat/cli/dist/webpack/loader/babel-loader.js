"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loader = exports.compileType = void 0;
const path_1 = __importDefault(require("path"));
const store_1 = __importDefault(require("../../helper/store"));
const root = process.cwd();
const projectResolve = (rpath) => path_1.default.resolve(root, rpath);
const pkg = require(projectResolve('package.json'));
pkg.dependencies = pkg.dependencies || {};
pkg.devDependencies = pkg.devDependencies || {};
const isAntd = pkg.dependencies.antd || pkg.devDependencies.antd ? true : false;
//
const absoluteRuntimePath = path_1.default.dirname(require.resolve('@babel/runtime/package.json'));
const babelRuntimeVersion = require('@babel/runtime/package.json').version;
const babelLoader = () => {
    // console.log(`store.config.reactRuntime`, store.config.reactRuntime)
    const config = store_1.default.config;
    const o = {
        loader: require.resolve('babel-loader'),
        options: {
            // Fixes "TypeError: __webpack_require__(...) is not a function"
            // https://github.com/webpack/webpack/issues/9379#issuecomment-509628205
            // https://babeljs.io/docs/en/options#sourcetype
            sourceType: 'unambiguous',
            presets: [
                [
                    require.resolve('@babel/preset-env'),
                    {
                        // useBuiltIns: 'entry',
                        // useBuiltIns: 'usage',
                        debug: store_1.default.config.debug.babelDebug,
                        useBuiltIns: store_1.default.config.moduleTransform.useBuiltIns,
                        corejs: 3,
                        exclude: ['transform-typeof-symbol'],
                        // loose: true
                    }
                ],
                require.resolve('@babel/preset-typescript'),
                // [require.resolve('@babel/preset-react'), reactRumtime]
            ],
            plugins: [
                [require.resolve('@babel/plugin-syntax-top-level-await'), {}],
                [
                    require.resolve('@babel/plugin-transform-runtime'),
                    {
                        corejs: false,
                        helpers: true,
                        version: babelRuntimeVersion,
                        regenerator: true,
                        absoluteRuntime: absoluteRuntimePath
                    }
                ],
                /**
                 * This option enables support for the "legacy" decorator proposal.
                 * You can enable it in Babel using the @babel/plugin-proposal-decorators plugin,
                 * but please be aware, there are some minor differences.
                 */
                [require.resolve('@babel/plugin-proposal-decorators'), { legacy: true }],
                // 'loose' mode configuration must be the same for
                // * @babel/plugin-proposal-class-properties
                // * @babel/plugin-proposal-private-methods
                // * @babel/plugin-proposal-private-property-in-object
                // (when they are enabled)
                [require.resolve('@babel/plugin-proposal-class-properties'), { loose: true }],
                [require.resolve('@babel/plugin-proposal-private-methods'), { loose: true }],
                [require.resolve('@babel/plugin-proposal-private-property-in-object'), { loose: true }],
                /**
                 * When set to true, the transform will only remove type-only imports (introduced in TypeScript 3.8).
                 * This should only be used if you are using TypeScript >= 3.8.
                 */
                [require.resolve('@babel/plugin-transform-typescript'), { onlyRemoveTypeImports: true }]
            ]
        }
    };
    // react
    if (store_1.default.config.reactRuntime) {
        const reactPersets = {
            runtime: store_1.default.config.reactRuntime,
            development: config.mode === 'development'
        };
        if (store_1.default.config.reactRuntime !== 'automatic') {
            reactPersets.useBuiltIns = true;
        }
        o.options.presets.push([require.resolve('@babel/preset-react'), reactPersets]);
        // fast refresh
        config.mode === 'development' &&
            config.server.hot &&
            o.options.plugins.unshift(require.resolve('react-refresh/babel'));
    }
    // antd
    if (isAntd && store_1.default.config.moduleTransform.antdTransformImport)
        o.options.plugins.unshift([require.resolve('babel-plugin-import'), { libraryName: 'antd', style: true }]);
    return o;
};
exports.default = babelLoader;
exports.compileType = 'babel';
exports.loader = babelLoader;
//# sourceMappingURL=babel-loader.js.map