"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const wpChain_1 = __importDefault(require("../helper/wpChain"));
const webpack_1 = __importDefault(require("webpack"));
// import FederatedStatsPlugin from 'webpack-federated-stats-plugin'
// import {BundleAnalyzerPlugin} from 'webpack-bundle-analyzer'
const store_1 = __importDefault(require("../helper/store"));
// import HtmlWebpackPlugin from 'html-webpack-plugin'
const dotenv_webpack_1 = __importDefault(require("dotenv-webpack"));
// import ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin'
// import ESLintPlugin from 'eslint-webpack-plugin'
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
// import DTSPlugin from './plugin/dts'
// 多线程 dts
const dts_1 = __importDefault(require("../dts"));
class WPPlugin {
    constructor() {
        this.isDev = true;
    }
    get dotenv() {
        const env = store_1.default.config.env || store_1.default.config.mode;
        const options = {
            path: store_1.default.resolve(`.env${env ? '.' + env : ''}`),
            // path: './some.other.env', // load this now instead of the ones in '.env'
            safe: true,
            allowEmptyValues: true,
            systemvars: true,
            silent: true,
            defaults: false // load '.env.defaults' as the default values if empty.
        };
        return {
            plugin: dotenv_webpack_1.default,
            args: [options]
        };
    }
    get define() {
        // 合并 mode env 参数
        let dlist = { mode: store_1.default.config.mode, env: store_1.default.config.env || '' };
        // 合并 store.config.define
        if (store_1.default.config.define) {
            dlist = { ...dlist, ...store_1.default.config.define };
        }
        //
        const options = {};
        Object.keys(dlist).map(key => {
            if (store_1.default.isESM && store_1.default.config.useImportMeta) {
                options[`import.meta.env.${key}`] = JSON.stringify(dlist[key]);
            }
            else {
                options[`process.env.${key}`] = JSON.stringify(dlist[key]);
            }
        });
        // return defines
        return {
            plugin: webpack_1.default.DefinePlugin,
            args: [options]
        };
    }
    //
    async setup() {
        const isDev = store_1.default.config.mode === 'development';
        this.isDev = isDev;
        const { define, dotenv } = this;
        const config = {
            plugin: {
                define,
                dotenv
            }
        };
        if (Object.keys(store_1.default.inesatCliShare.moduleFederation).length > 0) {
            config.plugin.mf = {
                plugin: webpack_1.default.container.ModuleFederationPlugin,
                args: [store_1.default.inesatCliShare.moduleFederation],
            };
            config.plugin.mfStats = {
                plugin: require('webpack-federated-stats-plugin'),
                args: [{ filename: 'inesat-cli.json' }],
            };
        }
        // progress
        if (store_1.default.config.debug.progress !== false) {
            const options = { name: `[InesatCli]` };
            if (store_1.default.config.debug.profile) {
                options.reporters = ['fancy', 'profile'];
                options.profile = true;
            }
            config.plugin.progress = {
                plugin: require.resolve('webpackbar'),
                args: [options]
            };
        }
        // analyzer
        if (store_1.default.config.build.analyze) {
            config.plugin.analyzer = {
                plugin: require('webpack-bundle-analyzer').BundleAnalyzerPlugin,
                args: [
                    {
                        // analyzerMode: 'static',
                        reportFilename: 'report.html',
                        openAnalyzer: true
                    }
                ]
            };
        }
        //
        const tsconfigJsonPath = store_1.default.resolve('tsconfig.json');
        const isTS = fs_extra_1.default.existsSync(tsconfigJsonPath);
        // dts
        if (isTS && store_1.default.config.build.createTs) {
            config.plugin.dts = {
                plugin: dts_1.default,
                args: [{ build: store_1.default.config.build, mf: store_1.default.config.moduleFederation }]
            };
        }
        if (store_1.default.config.jsCheck) {
            // ts check
            if (isTS) {
                config.plugin.tsCheck = {
                    plugin: require.resolve('fork-ts-checker-webpack-plugin'),
                    args: [
                        {
                            async: isDev,
                            // eslint: {
                            //   enabled: true,
                            //   files: `${store.appSrc}/**/*.{ts,tsx,js,jsx}`,
                            // },
                            typescript: {
                                configFile: tsconfigJsonPath,
                                profile: false,
                                typescriptPath: 'typescript',
                                // configOverwrite: {
                                //   compilerOptions: {skipLibCheck: true},
                                // },
                            },
                            // logger: {issues: 'console'},
                        }
                    ]
                };
            } //
            // else {
            config.plugin.eslint = {
                plugin: require.resolve('eslint-webpack-plugin'),
                args: [
                    {
                        extensions: ['js', 'mjs', 'jsx', 'ts', 'tsx'],
                        context: store_1.default.root,
                        // overrideConfigFile: resolveApp('.eslintrc.js'),
                        files: ['src/**/*.{ts,tsx,js,jsx}'],
                        // eslintPath: require.resolve('eslint'),
                        cache: true,
                        cacheLocation: path_1.default.resolve(store_1.default.config.cacheDir, 'eslint'),
                        fix: true,
                        threads: true,
                        lintDirtyModulesOnly: false
                    }
                ]
            };
            // }
        }
        // if (store.config.build.emptyOutDir && !isDev) {
        //   const {CleanWebpackPlugin} = require('clean-webpack-plugin')
        //   config.plugin.clean = {
        //     plugin: CleanWebpackPlugin,
        //     args: [{cleanOnceBeforeBuildPatterns: [`!${store.typesOutputDir}/**`]}],
        //   }
        // }
        wpChain_1.default.merge(config);
    }
}
exports.default = WPPlugin;
//# sourceMappingURL=plugin.js.map