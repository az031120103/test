"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const store_1 = __importDefault(require("../helper/store"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
class WPDevelopment {
    constructor() { }
    async setup() {
        const { devServer } = this;
        const config = {
            mode: 'development',
            devtool: 'inline-source-map',
            devServer,
        };
        wpChain_1.default.merge(config);
    }
    // dev server
    get devServer() {
        const overlayLoggerLv = store_1.default.config.debug.level === 'error' ? { errors: true, warnings: false } : { errors: true, warnings: true };
        const storeServer = store_1.default.config.server;
        if (storeServer.https && !storeServer.http2) {
            if (typeof storeServer.https === 'boolean') {
                storeServer.server = 'https';
            }
            else {
                storeServer.server = {
                    type: 'https',
                    options: storeServer.https,
                };
            }
            delete storeServer.https;
        }
        else if (storeServer.http2) {
            if (typeof storeServer.http2 === 'boolean') {
                storeServer.server = 'spdy';
            }
            else {
                storeServer.server = {
                    type: 'spdy',
                    options: storeServer.http2,
                };
            }
            delete storeServer.http2;
        }
        // console.log('storeServer', storeServer)
        return {
            // host: '0.0.0.0',
            allowedHosts: ['all'],
            historyApiFallback: true,
            // compress: true,
            static: [
                store_1.default.publicDir,
                // 暴露 d.ts 文件
                {
                    directory: store_1.default.outDir,
                    publicPath: '/',
                    staticOptions: {
                        setHeaders: function (res, path) {
                            if (path.toString().endsWith('.d.ts'))
                                res === null || res === void 0 ? void 0 : res.set('Content-Type', 'application/javascript; charset=utf-8');
                        }
                    }
                }
            ],
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, PATCH, OPTIONS',
                'Access-Control-Allow-Headers': 'X-Requested-With, content-type, Authorization'
            },
            client: {
                overlay: {
                    ...overlayLoggerLv,
                }
            },
            ...storeServer
        };
    }
}
exports.default = WPDevelopment;
//# sourceMappingURL=development.js.map