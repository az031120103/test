"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const chalk_1 = __importDefault(require("chalk"));
class ModuleScopePlugin {
    constructor(appSrc, allowedFiles = []) {
        this.appSources = Array.isArray(appSrc) ? appSrc : [appSrc];
        this.allowedFiles = new Set(allowedFiles);
    }
    apply(compiler) {
        const { appSources } = this;
        compiler.hooks.file.tapAsync('ModuleScopePlugin', (request, contextResolver, callback) => {
            // Unknown issuer, probably webpack internals
            if (!request.context.issuer) {
                return callback();
            }
            if (
            // If this resolves to a node_module, we don't care what happens next
            request.descriptionFileRoot.indexOf('/node_modules/') !== -1 ||
                request.descriptionFileRoot.indexOf('\\node_modules\\') !== -1 ||
                // Make sure this request was manual
                !request.__innerRequest_request) {
                return callback();
            }
            /*
             * Resolve the issuer from our appSrc and make sure it's one of our files
             * Maybe an indexOf === 0 would be better?
             */
            if (appSources.every(appSrc => {
                const relative = path_1.default.relative(appSrc, request.context.issuer);
                // If it's not in one of our app src or a subdirectory, not our request!
                return relative.startsWith('../') || relative.startsWith('..\\');
            })) {
                return callback();
            }
            const requestFullPath = path_1.default.resolve(path_1.default.dirname(request.context.issuer), request.__innerRequest_request);
            if (this.allowedFiles.has(requestFullPath)) {
                return callback();
            }
            /*
             * Find path from src to the requested file
             * Error if in a parent directory of all given appSources
             */
            if (appSources.every(appSrc => {
                const requestRelative = path_1.default.relative(appSrc, requestFullPath);
                return requestRelative.startsWith('../') || requestRelative.startsWith('..\\');
            })) {
                const scopeError = new Error(`${`You attempted to import ${chalk_1.default.cyan(request.__innerRequest_request)} which falls outside of the project ${chalk_1.default.cyan('src/')} directory. ` +
                    `Relative imports outside of ${chalk_1.default.cyan('src/')} are not supported.`}${os_1.default.EOL}You can either move it inside ${chalk_1.default.cyan('src/')}, or add a symlink to it from project's ${chalk_1.default.cyan('node_modules/')}.`);
                Object.defineProperty(scopeError, '__module_scope_plugin', {
                    value: true,
                    writable: false,
                    enumerable: false,
                });
                console.log(request.context.issuer, request.relativePath);
                return callback(scopeError, request);
            }
            return callback();
        });
    }
}
exports.default = ModuleScopePlugin;
//# sourceMappingURL=index.js.map