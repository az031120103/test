"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformImportExposesPath = exports.transformExposesPath = exports.transformPathImport = exports.transformLibName = void 0;
const path_1 = __importDefault(require("path"));
const store_1 = __importDefault(require("../../../helper/store"));
const globalImportRE = /(?:(?:import|export)\s?(?:type)?\s?(?:(?:\{[^;\n]+\})|(?:[^;\n]+))\s?from\s?['"][^;\n]+['"])|(?:import\(['"][^;\n]+?['"]\))/g;
const staticImportRE = /(?:import|export)\s?(?:type)?\s?\{?.+\}?\s?from\s?['"](.+)['"]/;
const dynamicImportRE = /import\(['"]([^;\n]+?)['"]\)/;
// const simpleStaticImportRE = /((?:import|export).+from\s?)['"](.+)['"]/
// const simpleDynamicImportRE = /(import\()['"](.+)['"]\)/
const transformLibName = (name, code) => {
    //
    code = code.replace(`declare module '${store_1.default.config.appSrc}'`, `declare module '${name}'`);
    // 兼容 不支持 replace all 的情况
    const reg = new RegExp(`${store_1.default.config.appSrc}/`, 'g');
    return code.replace(reg, `${name}/`);
    // return code.replaceAll(`${store.config.appSrc}/`, `${name}/`)
};
exports.transformLibName = transformLibName;
const transformPathImport = (o) => {
    return o.text.replace(globalImportRE, str => {
        let matchResult = str.match(staticImportRE);
        if (!matchResult) {
            matchResult = str.match(dynamicImportRE);
        }
        if (matchResult && matchResult[1]) {
            let rs = matchResult[1];
            // alias
            if (!rs.startsWith('.')) {
                const alias = store_1.default.config.resolve.alias;
                let isInAlias = false;
                for (const [k, v] of Object.entries(alias)) {
                    if (rs.startsWith(`${k}/`)) {
                        rs = rs.replace(`${k}/`, '');
                        rs = path_1.default.join(v, rs);
                        // change to relative path
                        rs = rs.replace(store_1.default.appSrc, '.').replace('\\', '/');
                        isInAlias = true;
                        break;
                    }
                }
                // deps
                if (!isInAlias) {
                    return str;
                }
            }
            // relative path
            let filename = path_1.default.resolve(path_1.default.dirname(o.name), rs);
            filename = filename.split('\\').join('/').split(`/${store_1.default.config.build.typesOutDir}/`)[1];
            return str.replace(matchResult[1], filename);
        }
        return str;
    });
};
exports.transformPathImport = transformPathImport;
/**
 * 转换模块路径成 expose 路径
 * @param module
 * @returns
 */
const transformExposesPath = (module, mf) => {
    if (mf === null || mf === void 0 ? void 0 : mf.exposes) {
        // 遍历 exposes 的声明结果
        for (const [key, value] of Object.entries(mf === null || mf === void 0 ? void 0 : mf.exposes)) {
            if (key && value) {
                // expose 对应的文件路径和 TS 编译结果路径是否相等
                if (module === value.replace('./', '')) {
                    // 将当前本地相对路径替换成 expose 的路径
                    return { newModule: key.replace('./', `${store_1.default.config.appSrc}/`), isExpose: true };
                }
            }
        }
    }
    // 没有配置到 expose 返回原路径
    return { newModule: module, isExpose: false };
};
exports.transformExposesPath = transformExposesPath;
/**
 * 转换内部 import 模块路径成 expose 路径
 * @param module
 * @returns
 */
const transformImportExposesPath = (entirety, mod, exposeName) => {
    if (!!exposeName) {
        const reg = new RegExp(`${mod}'`, 'g');
        const regDouble = new RegExp(`${mod}"`, 'g');
        entirety = entirety.replace(reg, `${exposeName}'`);
        entirety = entirety.replace(regDouble, `${exposeName}"`);
        return entirety;
    }
    return entirety;
};
exports.transformImportExposesPath = transformImportExposesPath;
//# sourceMappingURL=transform.js.map