"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const store_1 = __importDefault(require("../helper/store"));
const wpChain_1 = __importDefault(require("../helper/wpChain"));
const module_1 = __importDefault(require("./module"));
class WPLibMode {
    constructor() {
        this.wpconfigs = [];
        this.isDev = false;
        this.module = new module_1.default();
        this.libConfig = {
            name: 'index',
            entry: 'index.js',
            formats: ['umd']
        };
    }
    async setup() {
        this.isDev = store_1.default.config.mode === 'development';
        this.initBuildLib();
        this.resetWpchain();
        //
        for (const format of this.libConfig.formats) {
            await this.libTarget(format);
            this.resetConfig(format);
        }
        if (store_1.default.config.debug.wplogger)
            console.log('[webpack config]', JSON.stringify(this.wpconfigs, null, 2));
        return this.wpconfigs;
    }
    resetWpchain() {
        // Object.keys(this.libConfig.entry).map(k => wpChain.plugins.delete('html_plugin_' + k))
        // if (this.libConfig.name) {
        //   wpChain.plugins.delete('html_plugin_' + this.libConfig.name)
        // }
        wpChain_1.default.plugins.delete('html_plugin_index');
        wpChain_1.default.plugins.delete('mf');
        // externals
        if (this.libConfig.external) {
            wpChain_1.default.externals(this.libConfig.external);
        }
        if (store_1.default.config.mode === 'production') {
            wpChain_1.default.plugins.delete('copy');
            // wpChain.devtool('source-map')
        }
        //{minimize: !this.isDev, chunkIds: 'named', emitOnErrors: true}
        // wpChain.optimization.splitChunks({chunks: 'all'})
    }
    resetConfig(format) {
        var _a;
        const config = wpChain_1.default.toConfig();
        if (config.devServer) {
            delete config.devServer;
        }
        const wp = { ...config, ...{ watch: this.isDev } };
        // wp.entry = {[this.libConfig.name || 'index']: this.libConfig.entry}
        wp.entry = this.libConfig.entry;
        wp.cache =
            typeof wp.cache === 'object'
                ? {
                    ...wp.cache,
                    ...{
                        name: `${store_1.default.pkg.name || 'inesatCli'}-${store_1.default.config.mode}-${store_1.default.config.env || 'local'}-${store_1.default.pkg.version}-${format}`,
                        type: 'filesystem',
                    },
                }
                : wp.cache;
        wp.resolve = { ...wp.resolve, ...{ extensions: ['.js', '.jsx', '.mjs', '.ts', '.tsx', '.json', '.wasm'] } };
        wp.output = {
            ...wp.output,
            ...{
                clean: ((_a = wp.output) === null || _a === void 0 ? void 0 : _a.clean) || true,
                path: store_1.default.resolve(path_1.default.join(store_1.default.outDir, format)),
                filename: typeof this.libConfig.fileName === 'function'
                    ? this.libConfig.fileName(format)
                    : typeof this.libConfig.fileName === 'string'
                        ? this.libConfig.fileName
                        : `[name].js`,
                // library: {type: format === 'esm' ? 'module' : format},
                assetModuleFilename: '[name][ext]',
                // chunkFormat: format === 'esm' ? 'module' : 'array-push',
            }
        };
        //
        // delete wp.output.assetModuleFilename
        wp.output.library = { type: format === 'esm' ? 'module' : format };
        if (format !== 'esm') {
            wp.output.library.name = this.libConfig.name;
        }
        if (format === 'umd') {
            wp.output.umdNamedDefine = true;
        }
        wp.optimization = { ...wp.optimization, ...{ chunkIds: 'named', emitOnErrors: true } };
        const isESM = format === 'esm';
        //
        wp.target = ['web', store_1.default.config.build.target];
        // wp.target = store.config.build.target
        wp.experiments = { ...wp.experiments, ...{ outputModule: isESM } };
        //
        if (isESM) {
            wp.externalsType = 'module';
            wp.output.environment = {};
        }
        this.wpconfigs.push(wp);
    }
    initBuildLib() {
        this.libConfig = { ...this.libConfig, ...store_1.default.config.build.lib };
    }
    async libTarget(format) {
        if (format === 'esm') {
            store_1.default.isESM = true;
            store_1.default.config.build.target = format === 'esm' ? 'es2018' : 'es5';
        }
        await Promise.all([this.module.setup()]);
    }
}
exports.default = new WPLibMode();
//# sourceMappingURL=wpLibMode.js.map