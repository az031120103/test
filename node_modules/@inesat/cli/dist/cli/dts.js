"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const https_1 = __importDefault(require("https"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
const store_1 = __importDefault(require("../helper/store"));
const logger_1 = __importDefault(require("../helper/logger"));
const nanospinner_1 = require("nanospinner");
const spinner = (0, nanospinner_1.createSpinner)().start();
class Dts {
    constructor() {
        /**
         * 创建目录
         * @param {*} filePath
         */
        this.dirCache = {};
    }
    mkdir(filePath) {
        const arr = filePath.split(path_1.default.sep);
        let dir = arr[0];
        for (let i = 1; i < arr.length; i++) {
            if (!this.dirCache[dir] && !fs_extra_1.default.existsSync(dir) && dir !== '') {
                this.dirCache[dir] = true;
                fs_extra_1.default.mkdirSync(dir);
            }
            dir = dir + '/' + arr[i];
        }
        fs_extra_1.default.writeFileSync(filePath, '');
    }
    async downloadFileAsync(uri, backupUri, filePath, fileName, alias, baseName) {
        const httpsAgent = new https_1.default.Agent({
            rejectUnauthorized: false,
        });
        axios_1.default.defaults.httpsAgent = httpsAgent;
        try {
            let useBackup = false;
            let originData = '';
            // logger.info(`[download ${fileName}]:${uri}`)
            spinner.start({ text: `[download ${fileName}]:${uri}\n` });
            const res = await axios_1.default.get(uri);
            originData = res === null || res === void 0 ? void 0 : res.data;
            if (originData.indexOf('declare') === -1) {
                const backupRes = await axios_1.default.get(backupUri);
                if ((backupRes === null || backupRes === void 0 ? void 0 : backupRes.data.indexOf('declare')) != -1) {
                    originData = backupRes === null || backupRes === void 0 ? void 0 : backupRes.data;
                    useBackup = true;
                }
            }
            if (originData.indexOf('declare') === -1) {
                spinner.error({ text: `[download ${fileName}]:${uri} not found` });
                return;
            }
            let newData = '';
            // 替换 remote 别名
            const regSingleQuote = new RegExp(`'${baseName}`, 'g');
            const regDoubleQuote = new RegExp(`"${baseName}`, 'g');
            newData = originData.replace(regSingleQuote, `'${alias}`);
            newData = newData.replace(regDoubleQuote, `"${alias}`);
            await fs_extra_1.default.ensureDir(filePath);
            const fullPath = path_1.default.resolve(filePath, fileName);
            this.mkdir(fullPath);
            fs_extra_1.default.writeFileSync(fullPath, newData, 'utf8');
            if (useBackup) {
                logger_1.default.warn(`[You are using inesat-cli 1.x declaration file ${fileName}]:${backupUri}\n`);
            }
            spinner.success({ text: `[download ${fileName}]:${uri} finish` });
            // process.exit()
        }
        catch (error) {
            // logger.error(error)
            spinner.error({ text: `[download ${fileName}]:${uri} not found` });
            // logger.error(`${uri} --> network error`)
            // process.exit()
        }
    }
    // 下载 remote 的 d.ts
    async downloadDts() {
        const remotes = store_1.default.inesatCliShare.downloadRemote;
        const dtsPath = store_1.default.config.dtsPath;
        if (remotes) {
            for (const [key, value] of Object.entries(remotes)) {
                if (key && value) {
                    const splitIndex = value.indexOf('@');
                    if (splitIndex === -1)
                        throw Error(`[inesatCli dts] invaild remotes url: ${value}`);
                    const baseName = value.substr(0, splitIndex);
                    let baseUrl = value.substr(splitIndex + 1);
                    baseUrl = baseUrl.substr(0, baseUrl.lastIndexOf('/'));
                    const { outDir, typesOutDir, typesInesatCliName } = store_1.default.config.build;
                    const defaultDtsUrl = `${baseUrl}/${typesOutDir.replace(`${outDir}/`, '')}/${typesInesatCliName}`;
                    // 可以独立设置 dtsPath，默认路径是 typesOutDir
                    const dtsUrl = dtsPath[key] ? dtsPath[key] : defaultDtsUrl;
                    // ==================== 用于兼容 inesatCli 1.x 类型下载
                    const backupDtsUrl = baseUrl.replace('inesatCli.js', 'index.d.ts');
                    await this.downloadFileAsync(dtsUrl, backupDtsUrl, store_1.default.config.typingsPath, `${key}.d.ts`, key, baseName);
                }
            }
        }
        else {
            logger_1.default.warn('No found remotes');
        }
    }
    async setup() {
        await this.downloadDts();
    }
}
exports.default = new Dts();
//# sourceMappingURL=dts.js.map