"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const inquirer_1 = __importDefault(require("inquirer"));
const axios_1 = __importDefault(require("axios"));
const git_promise_1 = __importDefault(require("git-promise"));
const fs_extra_1 = __importDefault(require("fs-extra"));
// import ora from 'ora'
const store_1 = __importDefault(require("../helper/store"));
const nanospinner_1 = require("nanospinner");
const path_1 = __importDefault(require("path"));
const logger_1 = __importDefault(require("../helper/logger"));
const templates_1 = __importDefault(require("../config/templates"));
class Init {
    constructor() {
        // templates: any = store.config.initTemplates
        this.templates = templates_1.default;
    }
    checkScriptRun() {
        var _a, _b;
        if ((_a = process.env.npm_execpath) === null || _a === void 0 ? void 0 : _a.includes('pnpm'))
            return 'pnpm';
        else if ((_b = process.env.npm_execpath) === null || _b === void 0 ? void 0 : _b.includes('yarn'))
            return 'yarn';
        else
            return 'npm';
    }
    async checkData(url) {
        try {
            if (/^http(s)?:\/\/.+/.test(url)) {
                const { data } = await axios_1.default.get(url);
                if (typeof data === 'object')
                    return data;
            }
            else {
                const filepath = path_1.default.join(process.cwd(), url);
                const d = require(filepath);
                if (typeof d === 'object')
                    return d;
            }
        }
        catch (e) {
            logger_1.default.error(e);
            return undefined;
        }
        return undefined;
    }
    async setup(cliOptions) {
        // console.log(process.env.npm_execpath, cliOptions)
        if (typeof cliOptions.data === 'string') {
            const data = await this.checkData(cliOptions.data);
            if (data) {
                this.templates = data;
            }
        }
        await this.selectTemplate();
    }
    // 选择模版
    async selectTemplate() {
        const templateNameList = [];
        for (const item in this.templates) {
            templateNameList.push(item);
        }
        let answers = await inquirer_1.default.prompt([
            {
                type: 'input',
                name: 'name',
                message: '请输入项目名:',
                default: function () {
                    return 'inesat-cli-project';
                },
            },
            {
                type: 'list',
                name: 'template',
                message: '请选择模板:',
                choices: templateNameList,
            },
        ]);
        let downLoadUrl = this.templates[answers.template];
        const downLoadName = answers.name;
        if (answers.template === 'other') {
            answers = await inquirer_1.default.prompt([
                {
                    name: 'other',
                    message: '请输入自定义模板 git 地址:',
                    type: 'input'
                },
            ]);
            // downLoadName = '自定义模板'
            downLoadUrl = answers['other'];
        }
        // console.log('answers',answers,downLoadUrl,downLoadName)
        await this.downloadRepo(downLoadUrl, `${downLoadName}`, '');
    }
    /**
     * 下载仓库
     * @param repoPath
     * @param localPath
     * @param branch
     */
    async downloadRepo(repoPath, localPath, branch) {
        const spinner = (0, nanospinner_1.createSpinner)().start();
        spinner.start({ text: `[downloading]\n` });
        branch = branch ? `-b ${branch} --` : '--';
        repoPath = `clone ${branch} ${repoPath} ./${localPath}`;
        if (!fs_extra_1.default.existsSync(localPath)) {
            await (0, git_promise_1.default)(repoPath);
            fs_extra_1.default.removeSync(`./${localPath}/.git`);
            try {
                fs_extra_1.default.unlinkSync(`./${localPath}/pnpm-lock.yaml`);
            }
            catch (error) { }
            const npmName = this.checkScriptRun();
            spinner.success({
                text: `cd ${localPath} && ${npmName === 'npm' ? 'npm i' : npmName} && ${npmName === 'npm' ? 'npm run' : npmName} dev`,
            });
        }
        else {
            spinner.error({ text: `This directory already exists` });
        }
    }
}
exports.default = new Init();
//# sourceMappingURL=init.js.map