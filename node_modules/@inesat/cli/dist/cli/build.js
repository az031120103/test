"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = require("webpack");
const wpChain_1 = require("../helper/wpChain");
const store_1 = __importDefault(require("../helper/store"));
const logger_1 = __importStar(require("../helper/logger"));
const utils_1 = require("../helper/utils");
const wpLibMode_1 = __importDefault(require("../webpack/wpLibMode"));
const dts_1 = require("../dts");
// import reporter from 'src/helper/reporter'// 使用后增加 500ms
class Build {
    constructor() {
        this.config = {};
        this.isLib = false;
    }
    async setup() {
        /**
         * 兼容输出到 outDir ，为了避开 clear
         * 在 plugin (src\dts\index.ts) 的 afterEmit 期间执行 emit 声明类型文件
         **/
        const isTypeForOutDir = store_1.default.config.build.outDir === store_1.default.config.build.typesOutDir;
        if (store_1.default.config.build.createTs && !isTypeForOutDir) {
            (0, dts_1.createDtsEmitThreadForBuild)();
        }
        this.isLib = !!store_1.default.config.build.lib;
        if (this.isLib) {
            // 切换到库模式
            this.config = (await wpLibMode_1.default.setup());
        }
        else {
            this.config = (0, wpChain_1.getConfig)();
        }
        if (store_1.default.config.debug.clearLog)
            (0, utils_1.clearConsole)();
        (0, logger_1.logTag)(`build mode ${store_1.default.config.mode}${this.isLib ? ' in [Library Mode] ' : ''}:`);
        if (store_1.default.config.compile.compileType !== 'babel')
            (0, logger_1.logTag)(`use ${store_1.default.config.compile.compileType}`, 'purple');
        // await reporter.measureFileSizesBeforeBuild()
        (0, webpack_1.webpack)(this.config, (err, stats) => {
            if (err) {
                logger_1.default.error(err.stack || err);
                if (err.details) {
                    logger_1.default.error(err.details);
                }
                return;
            }
            if (stats.hasErrors()) {
                logger_1.default.error(stats.toString({
                    // all: false,
                    colors: true,
                    // errors: true,
                }));
                (0, logger_1.logTag)('Failed to compile.', 'red');
                if (!this.isLib)
                    process.exit(1);
            }
            if (stats.hasWarnings()) {
                (0, logger_1.logTag)(`Compiled with warnings.`, 'yellow');
                logger_1.default.warn(stats.toString({
                    // all: false,
                    colors: true,
                    // warnings: true,
                }));
            }
            logger_1.default.info(stats.toString({
                colors: true,
                all: false,
                assets: true,
                // children: true,
                // chunks: true,
                // timings: true,
                // version: true,
            }) + '\n');
            (0, logger_1.logTag)(`Compiled successfully.`, 'green');
            // reporter.printFileSizesAfterBuild(stats)
        });
    }
}
exports.default = new Build();
//# sourceMappingURL=build.js.map