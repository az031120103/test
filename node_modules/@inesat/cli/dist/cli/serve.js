"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const cors_1 = __importDefault(require("cors"));
const compression_1 = __importDefault(require("compression"));
const store_1 = __importDefault(require("../helper/store"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const chalk_1 = __importDefault(require("chalk"));
const logger_1 = __importStar(require("../helper/logger"));
const prepareURLs_1 = __importDefault(require("../helper/prepareURLs"));
const https_1 = __importDefault(require("https"));
const utils_1 = require("../helper/utils");
class Serve {
    constructor() {
        this.resourcePath = '';
        const app = (0, express_1.default)();
        app.use((0, compression_1.default)());
        app.use((0, cors_1.default)());
        this.app = app;
        this.resourcePath = path_1.default.join(store_1.default.inesatCliRoot, 'resource');
    }
    startLogger({ httpsOptions, host, port, publicPath }) {
        if (publicPath && (publicPath.indexOf('http://') > -1 || publicPath.indexOf('https://') > -1)) {
            logger_1.default.info(`- Network: ${chalk_1.default.hex('#3498db')(publicPath)} \n`);
        }
        else {
            const protocol = httpsOptions ? 'https' : 'http';
            const realHost = host || '0.0.0.0';
            const urls = (0, prepareURLs_1.default)(protocol, realHost, port, publicPath);
            // logger.info(`  - Run Serve At:`)
            logger_1.default.info(`- Local:   ${chalk_1.default.hex('#3498db')(urls.localUrlForTerminal)}`);
            logger_1.default.info(`- Network: ${chalk_1.default.hex('#3498db')(urls.lanUrlForTerminal)} \n`);
        }
    }
    async setup() {
        if (store_1.default.config.debug.clearLog)
            (0, utils_1.clearConsole)();
        (0, logger_1.logTag)(`server running at:`);
        const staticRoot = store_1.default.resolve(store_1.default.config.build.outDir);
        this.app.use(express_1.default.static(staticRoot));
        // TODO: 加入SSG SSR需要
        // 默认入口 适配 single spa
        const html = await fs_extra_1.default.readFile(path_1.default.join(staticRoot, 'index.html'), 'utf8');
        this.app.get('*', (req, res) => res.send(html));
        //
        const { host, port } = store_1.default.config.server;
        const httpsOptions = store_1.default.config.server.https;
        const publicPath = store_1.default.config.base;
        //
        if (httpsOptions) {
            const httpsServer = https_1.default.createServer(typeof httpsOptions !== 'boolean'
                ? httpsOptions
                : {
                    key: fs_extra_1.default.readFileSync(path_1.default.join(this.resourcePath, 'inesatCli.key')),
                    cert: fs_extra_1.default.readFileSync(path_1.default.join(this.resourcePath, 'inesatCli.cert')),
                }, this.app);
            httpsServer.listen(port, () => {
                this.startLogger({ httpsOptions, host, port, publicPath });
            });
        }
        else {
            this.app.listen(port, () => {
                this.startLogger({ httpsOptions, host, port, publicPath });
            });
        }
    }
}
exports.default = new Serve();
//# sourceMappingURL=serve.js.map